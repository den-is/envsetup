" First set leader key
let mapleader = ","                             " Use ',' (comma char) as leader key, instead of default '\'

{% if vim_complete %}
""" Vundle """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible                " be iMproved, required
filetype off                    " required

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Plugin 'VundleVim/Vundle.vim'

{% if vim_solarized %}
Plugin 'altercation/vim-colors-solarized'
{% endif %}
{% for plugin in vimplugins %}
Plugin '{{ plugin }}'
{% endfor %}

call vundle#end()               " required
filetype plugin indent on       " required
{% endif %}

""" Key mappings """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set pastetoggle=<F2>                            " Toggle auto-indenting for code paste
nnoremap <C-J> <C-W><C-J>                       " Move between windows with CTRL-h/j/k/l instead of CTRL-o,h/j/k/l
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>
nnoremap <Tab> :bnext<CR>                       " Cycle through tabs
nnoremap <S-Tab> :bprevious<CR>
nnoremap <Leader>w :write<CR>                   " Save file with leader
nnoremap <Leader>q :quit<cr>                    " Quit file with leader
nnoremap <silent> <Leader>/ :nohlsearch<CR>     " Dismiss search highlightedness
nnoremap <silent> <Leader>ev :e $MYVIMRC<CR>    " Load vimrc for editing
nnoremap <silent> <Leader>sv :so $MYVIMRC<CR>   " Load vimrc for editing
{% if vim_complete %}
map <C-n> :NERDTreeToggle<CR>
{% endif %}

""" Code highlight and indentation """""""""""""""""""""""""""""""""""""""""""
set tabstop=2                   " Set the default tabstop
set shiftwidth=2                " Set the default shift width for indents
set expandtab                   " Make tabs into spaces (set by tabstop)
set smarttab                    " Smarter tab levels
set autoindent                  " Auto indent

" Language specific
let python_highlight_all = 1
{% if vim_complete %}
"autocmd Filetype python setlocal tabstop=4 shiftwidth=4 expandtab autoindent
{% else %}
autocmd Filetype python setlocal tabstop=4 shiftwidth=4 expandtab autoindent
{% endif %}
" or use ~/.vim/ftplugin/LANGUAGE.vim

""" Colors and Fonts """""""""""""""""""""""""""""""""""""""""""""""""""""""""
set t_Co=256
syntax enable                   " Enable syntax highlighting
{% if vim_solarized %}
set background=dark
"colorscheme solarized
{% endif %}
{% if vim_complete %}
let g:airline#extensions#tabline#enabled = 1
"let g:airline_powerline_fonts = 1 " Install powerline fonts on system to use this option
{% endif %}

""" Search """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set ignorecase                  " Ignore case when searching
set smartcase                   " When searching try to be smart about cases
set hlsearch                    " Highlight search results
set incsearch                   " Makes search act like search in modern browsers
set wrapscan                    " Search-next wraps back to start of file

""" VIM behaviours """""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set fileformat=unix
set encoding=utf-8
set history=500                 " Sets how many lines of history VIM has to remember
set timeoutlen=150              " Time to wait after ESC (default causes an annoying delay)
set laststatus=2                " Always show the status line
set scrolloff=5                 " Minimal number of screen lines to keep above and below the cursor
set hidden                      " Allow buffer switching without saving
set autoread                    " Set to auto read when a file is changed from the outside
set ruler                       " Always show current position
set backspace=eol,start,indent  " Configure backspace so it acts as it should act
set whichwrap+=<,>,h,l,[,]      " Continue next to line when reached beginning/end of current line
set splitbelow                  " More natural splitting
set splitright
set lazyredraw                  " Don't redraw while executing macros (good performance config)
set magic                       " For regular expressions turn magic on
set showmatch                   " Show matching brackets when text indicator is over them
set matchtime=5                 " How many tenths of a second to blink when matching brackets
set nojoinspaces                " Use one space, not two, after punctuation.
set showcmd                     " Show command or size of selected text in Visula mode
set list listchars=tab:»·,trail:·,nbsp:·    " Show extra whitespaces
"set cursorline                 " Highlight current line
"set number                     " Show numbers

""" Bash-style tab completion """"""""""""""""""""""""""""""""""""""""""""""""
set wildmenu
set wildmode=list:longest,full
set wildignore=*.o,*~,*.pyc,*.so,*.zip

""" Backup ( WARNING: Potentialy dangerous )""""""""""""""""""""""""""""""""""
"set nobackup                    " Do not make a backup before overwriting a file, which stays around
"set nowritebackup               " Do not make a backup before overwriting a file, which is deleted after successful operation
"set noswapfile                  " Don't create swapfile. Whole data will be in memory

""" No annoying sound on errors """"""""""""""""""""""""""""""""""""""""""""""
set noerrorbells
set visualbell
set t_vb=
set tm=500

""" Scripts """"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Python with virtualenv support
python << EOF
import os
if 'VIRTUAL_ENV' in os.environ:
  virtualenv_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(virtualenv_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF
